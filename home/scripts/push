#!/usr/bin/env bash
set -euo pipefail

# If you delete this, also delete the completion file. _push

# Check if required environment variables are set
if [ -z "${PUSHOVER_USER_KEY:-}" ]; then
  echo "Error: PUSHOVER_USER_KEY environment variable is not set." >&2
  exit 1
fi

if [ -z "${PUSHOVER_APP_KEY_DEFAULT:-}" ]; then
  echo "Error: PUSHOVER_APP_KEY_DEFAULT environment variable is not set." >&2
  exit 1
fi

# Help/usage
usage() {
  cat <<EOF
Usage: $(basename "$0") [options] [MESSAGE]

Send a Pushover notification.Reads MESSAGE from arguments or standard input if no arguments are provided.
If neither arguments nor standard input is provided, sends "PING".

Options:
  -m, --message TEXT       Notification message (or pass via pipe/positional; default "PING")
  -i, --image PATH         Attach an image (max 5 MiB)
  -t, --title TEXT         Notification title
  -u, --url URL            Include a URL
  -T, --url-title TEXT     Title for the URL
  -S, --timestamp SECS     Unix timestamp for the message
  -d, --device DEVICE      Target device name (otherwise all devices)
  -h, --help               Show this help message and exit
EOF
}

# Manual long-to-short mapping
ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --message)   ARGS+=(-m "$2");       shift 2 ;;
    --image)     ARGS+=(-i "$2");       shift 2 ;;
    --title)     ARGS+=(-t "$2");       shift 2 ;;
    --url)       ARGS+=(-u "$2");       shift 2 ;;
    --url-title) ARGS+=(-T "$2");       shift 2 ;;
    --timestamp) ARGS+=(-S "$2");       shift 2 ;;
    --device)    ARGS+=(-d "$2");       shift 2 ;;
    --help)      ARGS+=(-h);            shift   ;;
    --)          shift; break           ;;
    -*)          ARGS+=("$1");          shift   ;;
    *)           ARGS+=("$1");          shift   ;;
  esac
done
set -- "${ARGS[@]}"

# Defaults
MESSAGE=""
IMAGE=""
TITLE=""
URL=""
URL_TITLE=""
TIMESTAMP=""
DEVICE=""

# Parse short options
while getopts "m:i:t:u:T:S:d:h" opt; do
  case "$opt" in
    m) MESSAGE=$OPTARG      ;;
    i) IMAGE=$OPTARG        ;;
    t) TITLE=$OPTARG        ;;
    u) URL=$OPTARG          ;;
    T) URL_TITLE=$OPTARG    ;;
    S) TIMESTAMP=$OPTARG    ;;
    d) DEVICE=$OPTARG       ;;
    h) usage; exit 0        ;;
    *) usage; exit 1        ;;
  esac
done
shift $((OPTIND -1))

# Determine MESSAGE (positional, piped, or default)
if [[ -z "$MESSAGE" ]]; then
  if [[ -t 0 ]] && [[ $# -gt 0 ]]; then
    MESSAGE="$*"
  elif ! [[ -t 0 ]]; then
    MESSAGE=$(cat)
  else
    MESSAGE="PING"
  fi
fi

# Validate timestamp
if [[ -n "$TIMESTAMP" && ! "$TIMESTAMP" =~ ^[0-9]+$ ]]; then
  echo "Error: --timestamp must be a positive integer." >&2
  exit 1
fi

# Validate image file & size
if [[ -n "$IMAGE" ]]; then
  [[ -f "$IMAGE" ]] || { echo "Error: File not found: $IMAGE" >&2; exit 1; }
  FILE_SIZE=$(stat -c%s "$IMAGE" 2>/dev/null || stat -f%z "$IMAGE")
  if (( FILE_SIZE > 5242880 )); then
    echo "Error: Image exceeds 5 MiB limit." >&2
    exit 1
  fi
fi

# Send notification
curl -sSf -X POST https://api.pushover.net/1/messages.json \
  -F "token=${PUSHOVER_APP_KEY_DEFAULT}" \
  -F "user=${PUSHOVER_USER_KEY}" \
  -F "message=${MESSAGE}" \
  ${TITLE:+-F "title=${TITLE}"} \
  ${URL:+-F "url=${URL}"} \
  ${URL_TITLE:+-F "url_title=${URL_TITLE}"} \
  ${TIMESTAMP:+-F "timestamp=${TIMESTAMP}"} \
  ${IMAGE:+-F "attachment=@${IMAGE}"} \
  ${DEVICE:+-F "device=${DEVICE}"}

exit $?