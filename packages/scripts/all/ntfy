#!/usr/bin/env bash
set -euo pipefail

# If you delete this, also delete the completion file _ntfy

# Simple wrapper around https://ntfy.sh to publish notifications.
# Implements a few of the most commonlyâ€“used headers (title, tags, priority, click, attach).
# Reads the message from:
#   1. --message/-m flag
#   2. positional arguments ("$@")
#   3. stdin (when piped)
#   4. defaults to "PING".
#
# Environment variables:
#   NTFY_URL   Full publish URL (default: https://ntfy.sh/large-language-mofongo)
#
# Usage examples:
#   ntfy --title "Build finished" --priority high "All tests passed âœ…"
#   echo "Backup complete" | ntfy --tags backup,floppy
#   ntfy -c https://example.com "Someone is at the door ðŸšª"
#   long-command && ntfy success || ntfy fail

NTFY_URL="${NTFY_URL:-https://ntfy.sh/large-language-mofongo}"

usage() {
  cat <<EOF
Usage: $(basename "$0") [options] [MESSAGE]

Send a notification using ntfy.sh.

Options:
  -m, --message TEXT     Notification message. If omitted, read from positional args, stdin, or defaults to "PING".
  -t, --title TEXT       Notification title (\"Title\" header).
  -g, --tags TAGS        Comma-separated list of tags or emojis (\"Tags\" header).
  -p, --priority LEVEL   Priority: urgent, high, default, low, min (\"Priority\" header).
  -c, --click URL        URL to open when the notification is clicked (\"Click\" header).
  -a, --attach URL       Remote URL to include as attachment (\"Attach\" header).
  -h, --help             Show this help message and exit.

The topic is encoded in the NTFY_URL variable. Set it per-script or export it in your shell.
EOF
}

# Map long options to short options to make getopts happy
ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --message)  ARGS+=( -m "$2" ); shift 2 ;;
    --title)    ARGS+=( -t "$2" ); shift 2 ;;
    --tags)     ARGS+=( -g "$2" ); shift 2 ;;
    --priority) ARGS+=( -p "$2" ); shift 2 ;;
    --click)    ARGS+=( -c "$2" ); shift 2 ;;
    --attach)   ARGS+=( -a "$2" ); shift 2 ;;
    --help)     ARGS+=( -h );       shift   ;;
    --)         shift; break ;;
    -*)         ARGS+=( "$1" );    shift   ;;
    *)          ARGS+=( "$1" );    shift   ;;
  esac
done
set -- "${ARGS[@]}"

# Defaults
MESSAGE=""
TITLE=""
TAGS=""
PRIORITY=""
CLICK=""
ATTACH=""

while getopts "m:t:g:p:c:a:h" opt; do
  case "$opt" in
    m) MESSAGE=$OPTARG       ;;
    t) TITLE=$OPTARG         ;;
    g) TAGS=$OPTARG          ;;
    p) PRIORITY=$OPTARG      ;;
    c) CLICK=$OPTARG         ;;
    a) ATTACH=$OPTARG        ;;
    h) usage; exit 0         ;;
    *) usage; exit 1         ;;
  esac
done
shift $((OPTIND -1))

# Determine MESSAGE if not provided via -m
if [[ -z "$MESSAGE" ]]; then
  if [[ $# -gt 0 ]]; then
    MESSAGE="$*"
  elif ! [[ -t 0 ]]; then
    MESSAGE="$(cat)"
  else
    MESSAGE="PING"
  fi
fi

# Assemble curl arguments
curl_args=( -sSf )

[[ -n "$TITLE"    ]] && curl_args+=( -H "Title: ${TITLE}" )
[[ -n "$TAGS"     ]] && curl_args+=( -H "Tags: ${TAGS}" )
[[ -n "$PRIORITY" ]] && curl_args+=( -H "Priority: ${PRIORITY}" )
[[ -n "$CLICK"    ]] && curl_args+=( -H "Click: ${CLICK}" )
[[ -n "$ATTACH"   ]] && curl_args+=( -H "Attach: ${ATTACH}" )

curl_args+=( -d "${MESSAGE}" "$NTFY_URL" )

curl "${curl_args[@]}"
