name: "Build Matrix"

on:
  # pull_request:
  # push:
  #   branches: [main]
  workflow_dispatch:

# Write access to commit changes
permissions:
  contents: write

jobs:
  update-flake:
    runs-on: ubuntu-latest
    name: "Update flake.lock"
    outputs:
      flake-updated: ${{ steps.update.outputs.updated }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - name: Update flake.lock
        id: update
        run: |
          nix flake update
          if git diff --quiet flake.lock; then
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "updated=true" >> $GITHUB_OUTPUT
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add flake.lock
            git commit -m "chore: update flake.lock"
          fi
      - name: Upload updated flake.lock
        if: steps.update.outputs.updated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-flake-lock
          path: flake.lock

  build:
    needs: update-flake
    if: needs.update-flake.outputs.flake-updated == 'true'
    strategy:
      fail-fast: true
      matrix:
        system: [aarch64-linux, x86_64-linux, aarch64-darwin]
        include:
          - system: aarch64-linux
            runner: ubuntu-24.04-arm
          - system: x86_64-linux
            runner: ubuntu-latest
          - system: aarch64-darwin
            runner: macos-latest
    runs-on: ${{ matrix.runner }}
    name: "Build ${{ matrix.system }}"
    steps:
      - uses: actions/checkout@v4
      - name: Download updated flake.lock
        uses: actions/download-artifact@v4
        with:
          name: updated-flake-lock
          path: .
      - uses: ./.github/actions/free-up-space # Free up space
      - uses: DeterminateSystems/nix-installer-action@main # Install Nix
      - uses: cachix/cachix-action@v15 # Setup Cachix
        with:
          name: ${{ secrets.CACHIX_CACHE }}
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build Flake Ouputs
        run: |
          nix run nixpkgs#omnix -- ci run . \
            --extra-access-tokens "github.com=${{ secrets.GITHUB_TOKEN }}" \
            --include-all-dependencies \
            --systems ${{ matrix.system }}

      - name: Push result to Cachix
        run: cachix push ${{ secrets.CACHIX_CACHE }} ./result

  create-pr:
    needs: [update-flake, build]
    if: needs.update-flake.outputs.flake-updated == 'true'
    runs-on: ubuntu-latest
    name: "Create Pull Request"
    steps:
      - uses: actions/checkout@v4
      - name: Download updated flake.lock
        uses: actions/download-artifact@v4
        with:
          name: updated-flake-lock
          path: .
      - name: Create Pull Request with updated flake.lock
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update flake.lock"
          title: "chore: update flake.lock"
          body: |
            Automated update of flake.lock file.

            This PR was automatically created by the ${{ github.workflow }} workflow.
            All matrix builds passed successfully.
          branch: update-flake-lock
          delete-branch: true
          base: main
      - name: Send pull request notification
        if: steps.create-pr.outputs.pull-request-url
        uses: ./.github/actions/ntfy-notify
        with:
          topic: ${{ secrets.NTFY_TOPIC }}
          title: "[Github] PR Created"
          priority: "3"
          tags: "white_check_mark"
          message: |
            ${{ github.workflow }} - Pull request created
            Repo: ${{ github.repository }}
          button_url: ${{ steps.create-pr.outputs.pull-request-url }}

  notify:
    needs: [update-flake, build, create-pr]
    if: always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled'))
    runs-on: ubuntu-latest
    name: "Notify Uncaptured Failures"
    steps:
      - uses: actions/checkout@v4
      - name: Notify uncaptured failure
        uses: ./.github/actions/ntfy-notify
        with:
          topic: ${{ secrets.NTFY_TOPIC }}
          title: "[Github] Workflow Failure"
          priority: "5"
          tags: "x"
          message: |
            ${{ github.workflow }} - Uncaptured failure detected
            Repo: ${{ github.repository }}

            Job Results:
            - update-flake: ${{ needs.update-flake.result }}
            - build: ${{ needs.build.result }}
            - create-pr: ${{ needs.create-pr.result }}
